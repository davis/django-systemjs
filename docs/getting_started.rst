===============
Getting started
===============


Installation
============

Django
------

Install by running:

.. code-block:: sh

   pip install django-systemjs

Then, add ``systemjs`` to your ``settings.INSTALLED_APPS``, and add the custom
staticfiles finder:

.. code-block:: python

    STATICFILES_FINDERS = [
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        'systemjs.finders.SystemFinder',
    ]


.. note::
    The custom finder looks up files in STATIC_ROOT directly. It is not needed
    if you use django-compressor and have COMPRESS_ROOT set to STATIC_ROOT (the
    default).


JSPM
----

To install ``jspm`` (http://jspm.io), you'll need some front-end tooling.
Make sure ``npm`` is installed on your operating system.

If you never installed ``jspm`` before, install it globally for the first time:

.. code-block:: sh

   sudo npm install -g jspm

This ensures that the ``jspm`` cli is available in your ``$PATH``.

JSPM uses the ``package.json`` from Node, so get that set-up:

.. code-block:: sh

    npm init

This will bring up an interactive prompt to ask for some package information.

Next, install ``jspm`` locally in your project, and pin its version:

.. code-block:: sh

   npm install --save-dev jspm

It's now time to initialize your ``jspm`` project. This is an interactive prompt
again, but we'll need to deviate from the defaults a bit to make it play nice
with Django.

.. note::
    these instructions are valid for jspm@0.16.x. The current jspm@0.17
    beta uses some different configuration styles/options. This will soon be
    documented.

.. code-block:: sh

    jspm init

    Would you like jspm to prefix the jspm package.json properties under jspm? [yes]: yes  # easier to keep track of jspm-specific settings/packages

    Enter server baseURL (public folder path) [/]: static  # same as settings.STATIC_ROOT, relative to package.json

    Enter jspm packages folder [static/jspm_packages]:  # keep it within settings.STATIC_ROOT

    Enter config file path [static/config.js]: my-project/static/config.js  # must be kept in version control, so somewhere where collectstatic can find it

    Enter client baseURL (public folder URL) [/]: /static/ # set to settings.STATIC_URL

    Do you wish to use a transpiler? [yes]: # current browsers don't have full support for ES6 yet

    Which ES6 transpiler would you like to use, Traceur or Babel? [traceur]: babel  # better tracebacks


Take some time to read the `JSPM docs <https://github.com/jspm/jspm-cli/tree/master/docs>`_
if you're not familiar with it yet.

.. note::
  A few settings are remarkable. We placed ``jspm_packages`` in
  ``settings.STATIC_ROOT``. This means that collectstatic will not post-process
  the files in here, which can be a problem.
  `Django SystemJS <https://pypi.python.org/pypi/django-systemjs>`_ handles this
  specific use case as it is intended for ``jspm``-users. There is an inherent
  limitation within JSPM which should be lifted with the 0.18 release.


Usage
=====

Template tag
------------

Usually, in your template you would write something like:

.. code-block:: html

    <script src="/path/to/system.js"></script>
    <script src="/path/to/config.js"></script>
    <script>System.import('my/awesome/app');</script>


With Django SystemJS you can replace this with:

.. code-block:: django

    {% load system_tags %}

    <script src="/path/to/system.js"></script>
    <script src="/path/to/config.js"></script>

    {% systemjs_import 'my/awesome/app.js' %}


.. note::
    If you followed the example setup earlier, the ``/path/to/system.js`` is
    ``{% static "jspm_packages/system.js" %}``.


When ``SYSTEMJS_ENABLED`` is ``False`` (default value is ``not DEBUG``),
the tag will output the previous ``System.import`` statement. Otherwise,
it will output something like:

.. code-block:: html

    <script src="/static/SYSTEMJS/my/awesome/app.js"></script>

This url is generated by the configured static files backend, so if you
use the ``CachedStaticFilesStorage``, all will be well.


.. note::
    django-storages(-redux) is still untested. If you run into any issues,
    raise an issue on Github and support will probably be added.

.. note::

    Added in version 1.1

    If you want to use ``django.contrib.staticfiles.storage.ManifestStaticFilesStorage``,
    you need to use the systemjs-version:
    ``systemjs.storage.SystemJSManifestStaticFilesStorage``. This storage ensures
    that during bundling the collected staticfiles (from ``collectstatic``)
    aren't removed from the manifest file.


Management command
------------------

Django-Systemjs comes with a management command to create all the
bundles. It does so by checking all your template files and
extracting the ``{% systemjs_import '...' %}`` template tags.

.. code-block:: sh

    python manage.py systemjs_bundle


By default it will look at all templates in your app directories, and the
additional template dirs for the vanilla Django template engine.

Jinja2 is unsupported.

.. note::

    The default bundling mechanism changed in 0.2. Before 0.2, all bundles would
    by default be created as self-executing (``jspm bundle-sfx <app>``). This
    was changed to the default ``jspm bundle <app>`` command. Self-executing
    bundles include the entire SystemJS library and your ``config.js``, leading
    to 1MB+ bundle files. This is painful if you have multiple bundles.

    Self-executing bundles can still be generated with the ``--sfx`` management
    command option:

    .. code-block:: sh

        python manage.py systemjs_bundle --sfx


Example workflow
================

Django SystemJS is designed as a non-intrusive library in development mode,
so that it won't sit in your way too much. Simply using the template tag
will be all you have to do as long as you're running with ``DEBUG=True``.

Example steps for deployment:

* Run ``git pull`` to update your copy of the code
* Install the dependencies: ``npm install``, followed by ``jspm install``
* Run collectstatic: ``python manage.py collectstatic``
* Bundle the apps in your project: ``python manage.py systemjs_bundle``.

The order of operations matters: to bundle, all the bits and pieces must be
collected so that ``jspm`` can retrieve them in your ``STATIC_ROOT``. It has no
notion of your ``static`` folders within your apps.


Available settings
==================

``SYSTEMJS_ENABLED``: defaults to ``not settings.DEBUG``. If disabled, the loading
of modules will happen in the 'standard' jspm way.

``SYSTEMJS_JSPM_EXECUTABLE``: path to the ``jspm-cli`` executable. Defaults to
``jspm``, which should be available if installed globally with ``npm``.

``SYSTEMJS_OUTPUT_DIR``: name of the subdirectory within ``settings.STATIC_ROOT``.
Bundled files will end up in this directory, and this is the place the
templatetag will point static files to.

``SYSTEMJS_PACKAGE_JSON_DIR``: directory containing your ``package.json`` file.
This is automatically guessed from ``BASE_DIR``. You will get an error in the
shell if you need to set it yourself.

``SYSTEMJS_DEFAULT_JS_EXTENSIONS``: in prior verions of jspm, the ``.js`` extension
for imports was optional. This is being phased out, and matches the
``defaultJSExtensions`` settings in ``config.js``.
